・ノック11 データの読み込み
pd.read_excel(excelファイル, sheet_name="A") : excelファイルをdfとして読み込み
    sheet_name="A" : シート名の指定
・ノック12 データの揺れの確認
df.head() : 簡単な揺れを確認する
データの揺れ : 入力ミスや表記方法の違いなどによりデータが不整合なこと
・ノック13 データ集計 (揺れそのまま)
pivot_table(aggfunc="size")
    aggfunc="size" : 行と列ごとの重複件数の確認
    fill_value=0 : 欠損値の補完値を指定
・ノック14 商品名の揺れ補正
pd.unique(df["A"]) : ユニークな値を抜き出す, データフレームを引数に取れない(列を指定), 出力されたarrayはソートされない
df.str : dfの文字列のcolumnの全てのデータに対しメソッド適用
    df.str.upper() : 小文字を大文字に変換
    df.str.replace("A", "B") : 文字列中のAをBに置換する
・ノック15 金額欠損値の補完
df.isnull() : dfの各要素について判定を行い、欠損値NaNであればTrue, それ以外ならFalse
df.any(axis=0) : 行、列ごとに一つでもTrueがあればTrueを返す, axisを設定しないデフォルトのときは列の結果を返す
    axis=1 : 0なら列, 1なら行を返す
df.loc[] : dfについて条件を満たした行、列を抽出できる
    loc["インデックスラベル1"] : インデックスラベル1の行を抽出
    loc[["インデックスラベル1", "インデックスラベル2"]] : 複数行を抽出
    loc["インデックスラベル1", "カラムラベル1"] : 指定した要素を抽出
    loc["インデックスラベル1":"インデックスラベル4", "カラムラベル1"] : インデックス1~4までスライス, カラムは1
    loc[df["インデックスラベル1"] > 400] : インデックスラベル1の行のうち、400を超えている
    loc[df["A"] > 400, ["B"]] : Aが400より大きいBカラムの要素
    ~df["A"] : ~はNOT演算子, isnullと組み合わせればNaNがFalseになる
    df["A"].sort_values(ascending=True) : Aを基準にsort
        ascending=True : Trueなら昇順, 降順
・ノック16 顧客名の揺れ補正
df["A"].astype("str") : Aの行(列)の要素を指定した型にNaNも含めて変換 NaNはnanという文字列に変換
    df["A"].str.isdight() : 文字列が数字かどうか判定
・ノック17 日付の揺れ補正
pd.to_timedelta(10, unit="days") : 時間差を表すtimedelta型(10 days → 10D)に変換
    unit="days" : 変換する単位の指定
・ノック18 顧客名をキーにしてデータ結合

・ノック19 クレンシングしたデータのダンプ

・ノック20 データの集計